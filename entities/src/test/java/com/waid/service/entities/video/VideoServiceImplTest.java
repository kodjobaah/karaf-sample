package com.waid.service.entities.video;


import java.util.Hashtable;
import java.util.List;

import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.naming.spi.InitialContextFactory;
import javax.naming.spi.InitialContextFactoryBuilder;
import javax.naming.spi.NamingManager;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;

import org.apache.derby.jdbc.EmbeddedDataSource;
import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;
import org.apache.openjpa.persistence.OpenJPAQuery;
import org.junit.Assert;
import org.junit.Test;

import com.waid.service.entities.entity.Video;
import com.waid.service.entities.entity.Viewer;
import com.waid.service.entities.video.VideoServiceImpl;

public class VideoServiceImplTest {

    public final class MyInitialcontextFactoryBuilder implements InitialContextFactoryBuilder {
        public InitialContextFactory createInitialContextFactory(Hashtable<?, ?> environment) throws NamingException {
            return new MyInitialContextFactory();
        }
    }

    @Test
    public void testWriteRead() throws Exception {
        NamingManager.setInitialContextFactoryBuilder(new MyInitialcontextFactoryBuilder());
        InitialContext ic = new InitialContext();
        EmbeddedDataSource ds = new EmbeddedDataSource();
        ds.setDatabaseName("target/test");
        ds.setCreateDatabase("create");
        ic.bind("osgi:service/javax.sql.DataSource/(osgi.jndi.service.name=jdbc/waid)", ds);
        VideoServiceImpl videoService = new VideoServiceImpl();
        EntityManagerFactory emf = Persistence.createEntityManagerFactory("videoTest", System.getProperties());
        EntityManager em = emf.createEntityManager();
        videoService.setEntityManager(em);
        em.getTransaction().begin();
        
        /*
        OpenJPAEntityManagerSPI oem = 
        		(OpenJPAEntityManagerSPI)em.getDelegate(); 
      
        String createSequenceTable = "CREATE TABLE APP.OPENJPA_SEQUENCE_TABLE (ID BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 1) NOT NULL PRIMARY KEY,SEQUENCE_VALUE BIGINT NOT NULL) ";
        OpenJPAQuery<?> create = oem.createNativeQuery(createSequenceTable);
        create.executeUpdate();
       */
        videoService.deleteAll();
        Viewer viewer = new Viewer();
        viewer.setName("kodjo");
        Video video = new Video("Christian Schneider");
        video.addViewer(viewer);
        videoService.addVideo(video);
        em.getTransaction().commit();
        List<Video> videos = videoService.getAll();
        Assert.assertEquals(1, videos.size());
        Assert.assertEquals("Christian Schneider", videos.get(0).getTitle());
    
    }

}
